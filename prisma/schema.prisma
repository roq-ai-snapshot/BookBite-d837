generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model feedbacks {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rating        Int
  comment       String?
  customer_id   String      @db.Uuid
  restaurant_id String      @db.Uuid
  users         users       @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurants   restaurants @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model menu_items {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String        @db.VarChar(255)
  description   String
  price         Int
  image_url     String?       @db.VarChar(255)
  restaurant_id String        @db.Uuid
  restaurants   restaurants   @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_items   order_items[]
}

model order_items {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quantity     Int
  order_id     String     @db.Uuid
  menu_item_id String     @db.Uuid
  menu_items   menu_items @relation(fields: [menu_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orders       orders     @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model orders {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status        String        @db.VarChar(255)
  total_price   Int
  created_at    DateTime      @db.Timestamp(6)
  updated_at    DateTime      @db.Timestamp(6)
  customer_id   String        @db.Uuid
  restaurant_id String        @db.Uuid
  order_items   order_items[]
  users         users         @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurants   restaurants   @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model restaurants {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String       @db.VarChar(255)
  location        String       @db.VarChar(255)
  contact_details String       @db.VarChar(255)
  operating_hours String       @db.VarChar(255)
  owner_id        String       @db.Uuid
  feedbacks       feedbacks[]
  menu_items      menu_items[]
  orders          orders[]
  users           users        @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  staff           staff[]
}

model staff {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String      @db.Uuid
  restaurant_id String      @db.Uuid
  restaurants   restaurants @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         users       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role        String        @db.VarChar(255)
  feedbacks   feedbacks[]
  orders      orders[]
  restaurants restaurants[]
  staff       staff[]
}
